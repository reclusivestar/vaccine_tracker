[{"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js":"1","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js":"2","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js":"3","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx":"4","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx":"5","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js":"6","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx":"7","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Home.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":158,"mtime":1611276649365,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":5525,"mtime":1611200014524,"results":"13","hashOfConfig":"10"},{"size":11990,"mtime":1611292115783,"results":"14","hashOfConfig":"10"},{"size":4746,"mtime":1610923666397,"results":"15","hashOfConfig":"10"},{"size":5706,"mtime":1611199734593,"results":"16","hashOfConfig":"10"},{"size":2680,"mtime":1611294129236,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vi5i8c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js",[],["40","41"],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js",["42"],"import './App.css';\nimport Vaccine from './Vaccine/Vaccine';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx",["43","44","45","46"],"import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport axios from 'axios';\r\nimport Map from '../Map/Map';\r\nimport states from '../Map/states.json';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nexport default function Vaccine() {\r\n\r\n    const url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/vaccine_data_us_state_timeline.csv\";\r\n    const definitions_url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/data_dictionary.csv\";\r\n\r\n    const [allData, setAllData] = useState([]); //in time series\r\n    const [subject, setSubject] = useState(\"doses_admin_total\");\r\n    const [allTitles, setAllTitles] = useState([]);\r\n    const [allDefinitions, setAllDefinitions] = useState([]);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\r\n    \r\n    function extractTitles(allData) {\r\n        const titles = [];\r\n        allData.forEach(data => {\r\n            titles.push(data.title)\r\n        })\r\n        setAllTitles(titles);\r\n    }\r\n\r\n    function formatTitle(title){\r\n        if (title === \"people_total\")\r\n            return \"People Total 1st Dose\";\r\n\r\n        let newTitle = title.split('_');\r\n        newTitle.map((word, i) => {\r\n            if (word === \"alloc\")\r\n                newTitle[i] = \"allocated\";\r\n            if (word === \"admin\")\r\n                newTitle[i] = \"administered\";\r\n        })\r\n        newTitle.map((word, i) => {\r\n            newTitle[i] = word[0].toUpperCase() + word.substring(1);\r\n        })\r\n        return newTitle.join(' ');\r\n    }\r\n    \r\n    function transformData(raw){\r\n        let results = [];\r\n        for (const [key, _] of Object.entries(raw.data[0])) {\r\n            let field = {};\r\n            field[\"title\"] = key;\r\n            field[\"data\"] = [];\r\n            results.push(field);\r\n        }\r\n        // filter empty data for each key\r\n\r\n        for (let i = 4; i < results.length; i++){\r\n            raw.data.forEach(field => {\r\n                if (field[results[i].title] !== \"\" && field[results[i].title] !== undefined\r\n                 && field[results[i].title] !== \" \"){\r\n                    results[i].data.push([field[\"date\"], field[\"stabbr\"], field[results[i].title]]);\r\n                }\r\n            })\r\n        }\r\n        let valid_results = results.slice(4);\r\n        console.log(valid_results);\r\n        extractTitles(valid_results);\r\n        getDataByState(valid_results);\r\n    }\r\n\r\n    function transformDataDefinitions(csv){\r\n        let definitions = [];\r\n        csv.data.forEach(col => {\r\n            definitions.push(col);\r\n        });\r\n        setAllDefinitions(definitions.slice(4, definitions.length - 1));\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchCSV(){\r\n            const csv = await axios.get(url).then(response => \r\n                Papa.parse(response.data,\r\n                          { header: true }));\r\n            transformData(csv);\r\n        }\r\n        async function fetchDefinitions(){\r\n            const csv = await axios.get(definitions_url).then(response => \r\n                Papa.parse(response.data,\r\n                          { header: true }));\r\n            transformDataDefinitions(csv);\r\n        }\r\n        fetchCSV();\r\n        fetchDefinitions();\r\n    }, []);\r\n\r\n    function filterState(raw, state){\r\n        let latest = [];\r\n        raw.forEach(row => {\r\n            let field = {};\r\n            field[\"title\"] = row.title;\r\n            field[\"data\"] = [];\r\n            latest.push(field);\r\n        });\r\n        latest.forEach((field, i) => {\r\n            field.data = raw[i].data.filter(data => data[1] === state);\r\n        });\r\n        return latest;\r\n    };\r\n\r\n    function getDataByState(data){\r\n        let latest_all = [];\r\n        states.forEach(state => {\r\n            latest_all.push({\"id\" : state.id, \"val\" : state.val, data : filterState(data, state.id)});\r\n        });\r\n        setAllData(latest_all);\r\n    }\r\n\r\n    function getDefinition() {\r\n        let data = allDefinitions.filter(def => def.column_name === subject)[0];\r\n        if (data)\r\n            return data.definition;\r\n    }\r\n\r\n    function chooseSubject(){\r\n        return (\r\n            <div style={{display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}> \r\n                <div style={{padding: \"1.4vw\"}}>\r\n                    <label style={{paddingLeft: isMobile? \"5%\" : \"\"}} for=\"titles\">Filter Data: </label>\r\n                    <select name=\"titles\" id=\"titles\" onChange={(e) => setSubject(e.target.value)} value={subject}>\r\n                    {allTitles.map(title => {\r\n                        return(\r\n                            <option value={title}>{formatTitle(title)}</option>\r\n                        )}\r\n                    )}\r\n                    </select>\r\n                </div>\r\n                <div style={{textAlign: isMobile? \"center\" : \"\"}}>\r\n                    <h2 style={{fontWeight: \"lighter\"}}>{getDefinition()}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(allData);\r\n    console.log(subject);\r\n    return ( \r\n        <div style={{marginLeft: isMobile? \"5%\" : \"18%\", width: isMobile? \"90%\" : \"60%\"}}>\r\n            {chooseSubject()}\r\n            <Map data={allData} title={subject} setTooltipContent={setContent}/>\r\n            <ReactTooltip>{content}</ReactTooltip>\r\n        </div>\r\n    );\r\n}","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx",["47","48","49"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    Marker,\r\n    Annotation\r\n  } from \"react-simple-maps\";\r\nimport { scaleQuantize } from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport axios from 'axios';\r\nimport Time from './Time';\r\nimport { startOfToday, format } from \"date-fns\";\r\nimport state_names from './states_hash.json';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst offsets = {\r\n    VT: [50, -8],\r\n    NH: [34, 2],\r\n    MA: [30, -1],\r\n    RI: [28, 2],\r\n    CT: [35, 10],\r\n    NJ: [34, 1],\r\n    DE: [33, 0],\r\n    MD: [47, 10],\r\n    DC: [49, 21]\r\n};\r\n\r\nconst Map = (props) => {\r\n  const url = \"https://datausa.io/api/data?drilldowns=State&measures=Population\";\r\n  const us_population_url = \"https://datausa.io/api/data?drilldowns=Nation&measures=Population\";\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [timeSeries, setTimeSeries] = useState([]);\r\n  const [populations, setPopulations] = useState([]);\r\n  const [USPopulation, setUSPopulation] = useState([]);\r\n  const [selectedTime, setSelectedTime] = useState();\r\n  const [cumalativeSum, setCumalativeSum] = useState(0);\r\n  const [highlightBox, setHighlightBox] = useState(\"\");\r\n\r\n  const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\r\n\r\n  const colors = [\"#f0f9e8\", \"#97d5c0\", \"#4ba8c9\", \"#1d79b5\", \"#254b8c\"]; \r\n  /* [\"#ffedea\", \"#ffcec5\", \"#ffad9f\", \"#ff8a75\", \r\n  \"#ff5533\", \"#e2492d\", \"#be3d26\", \"#9a311f\", \"#782618\"];*/\r\n\r\n  function extractNumbers() {\r\n    let data = [];\r\n    timeSeries.forEach(state => {\r\n      if (state.data[0]){\r\n        state.data.forEach(date => \r\n          data.push(getRate(state.val, date.count))\r\n        );\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  const colorScale = scaleQuantize()\r\n  .domain(extent(extractNumbers())).nice()\r\n  .range(colors);\r\n  \r\n  function extractDomain(){\r\n    const domains = [];\r\n    colors.forEach(color => \r\n      domains.push({\"color\" : color, \"range\" : colorScale.invertExtent(color)})\r\n    );\r\n    return domains;\r\n  }\r\n\r\n  async function getAllPopulations(){\r\n    const response = await axios.get(url); \r\n    setPopulations(response.data.data);\r\n  }\r\n  async function getUSPopulation(){\r\n    const response = await axios.get(us_population_url); \r\n    setUSPopulation(parseInt(response.data.data[0].Population));\r\n  }\r\n\r\n  //set defaults when map first loads\r\n  useEffect(() => {\r\n    const today = format(startOfToday(), \"MM/dd/yyyy\");\r\n    console.log(props.data)\r\n    let data = filterField(props.data, props.title);\r\n    data = makeContinuous(data);\r\n    setTimeSeries(data);\r\n    setAllStates(filterDate(data, today));\r\n    getAllPopulations();\r\n    getUSPopulation();\r\n    setSelectedTime(today);\r\n  }, [props.data]);\r\n\r\n  //changes based on the data selected\r\n  useEffect(() => {\r\n    let data = filterField(props.data, props.title);\r\n    data = makeContinuous(data);\r\n    setTimeSeries(data);\r\n    setAllStates(filterDate(data, selectedTime));\r\n    getAllPopulations();\r\n  }, [props.title])\r\n\r\n  //changes based on time selected\r\n  useEffect(() => {\r\n    setAllStates(filterDate(timeSeries, selectedTime));\r\n  }, [selectedTime]);\r\n\r\n  function getRate(val, count){\r\n    let pop = populations.filter(state => state[\"ID State\"].slice(-2) === val)[0];\r\n    if (pop) //some states not in population data\r\n      return count / parseInt(pop.Population) * 100;\r\n    return 0;\r\n  }\r\n\r\n  function filterField(allData, title){\r\n    let filtered = [];\r\n    allData.forEach(field => {\r\n      let onlyData = field.data.filter(row => row.title === title)[0].data;\r\n      let parsed = [];\r\n      if (onlyData){\r\n          parsed = onlyData.map(val => {\r\n              return {\"date\" : val[0], \"count\" : parseInt(val[2])};\r\n          });\r\n      }\r\n      filtered.push({...field, data: parsed});\r\n    });\r\n    return filtered;\r\n  }\r\n\r\n  //update with days until today copying the last provided data\r\n  function expandUntilToday(allData){\r\n    allData.forEach(state => {\r\n      if (state.data.length) {\r\n        let latest = new Date(state.data[state.data.length - 1].date);\r\n        let latestCount = state.data[state.data.length - 1].count\r\n        let days = parseInt((startOfToday() - latest) / (1000 * 60 * 60 * 24), 10);\r\n        while (days > 0) {\r\n          latest.setDate(latest.getDate() + 1);\r\n          state.data.push({\r\n            date : format(latest, \"MM/dd/yyyy\"),\r\n            count: latestCount\r\n          });\r\n          days--;\r\n        }\r\n      }\r\n    })\r\n    return allData;\r\n  }\r\n\r\n  // fill gaps between first and second date with data from the first\r\n  function makeContinuous(allData){\r\n    let continuous = [];\r\n    allData.forEach(state => {\r\n      let newIndex = 0;\r\n      let newState = {...state};\r\n      newState.data = Array.from(state.data);\r\n      for (let i = 0; i + 1 < state.data.length; i++){\r\n        let start = new Date(state.data[i].date);\r\n        let end = new Date(state.data[i+1].date);\r\n        let days = parseInt((end - start) / (1000 * 60 * 60 * 24), 10);\r\n        while (days > 1){\r\n          newIndex++;\r\n          start.setDate(start.getDate() + 1);\r\n          newState.data.splice(newIndex, 0, {\r\n            date: format(start, \"MM/dd/yyyy\"),\r\n            count: state.data[i].count\r\n          });\r\n          days--;\r\n        }\r\n        newIndex++;\r\n      }\r\n      continuous.push(newState);\r\n    });\r\n    return expandUntilToday(continuous);\r\n  }\r\n\r\n  function filterDate(data, date) {\r\n    let filtered = [];\r\n    data.forEach(state => {\r\n      let newData = state.data.filter(data => data.date === date);\r\n      filtered.push({...state, data: newData});\r\n    });\r\n    console.log(filtered, date);\r\n    getSum(filtered);\r\n    return filtered;\r\n  }\r\n\r\n  function getSum(data){\r\n    let sum = 0;\r\n    data.forEach(state => {\r\n      if(state.data.length)\r\n        sum += state.data[0].count;\r\n    })\r\n    setCumalativeSum(sum);\r\n  }\r\n\r\n  const handleClick = val => () => {\r\n    let state = allStates.filter(state => state.val === val);\r\n    if (state[0].data.length)\r\n      console.log(getRate(val, state[0].data[0].count));\r\n    console.log(state);\r\n  };\r\n\r\n  function addCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  console.log(allStates);\r\n  console.log(timeSeries);\r\n\r\n  function legend(){\r\n    let domains = extractDomain();\r\n    console.log(domains);\r\n    return (\r\n      <div style={{marginLeft: \"5%\", marginTop: isMobile? \"5%\" : \"10%\"}}>\r\n        {domains.map((domain, i) => {\r\n          let low = Math.round((domain.range[0] + Number.EPSILON) * 100) / 100;\r\n          let high = Math.round((domain.range[1] + Number.EPSILON) * 100) / 100;\r\n          return (\r\n            <div style={{display: \"flex\"}}>\r\n              {highlightBox === colors[i] ? \r\n              <div style={{ backgroundColor: colors[i], padding: isMobile? \"0.2em\" : \"0.5vw\", outline: \"3px solid red\" }} key={i}></div>\r\n              :\r\n              <div style={{ backgroundColor: colors[i], padding: isMobile? \"0.2em\" : \"0.5vw\" }} key={i}></div>}\r\n              <p style={{fontSize: isMobile? \"6px\" : \"0.6vw\", marginLeft: \"1vw\"}}>{low}% - {high}%</p>\r\n            </div>\r\n          )}\r\n        )}\r\n        <div style={{display: \"flex\", marginTop: \"1vw\"}}>\r\n          {highlightBox === \"#A9A9A9\" ? \r\n          <div style={{ backgroundColor: \"#A9A9A9\", padding: isMobile? \"0.2em\" : \"0.5vw\", outline: \"3px solid red\" }}></div>\r\n          :\r\n          <div style={{ backgroundColor: \"#A9A9A9\", padding: isMobile? \"0.2em\" : \"0.5vw\" }}></div>}\r\n          <p style={{fontSize: isMobile? \"5px\" : \"0.6vw\", marginLeft: \"1vw\"}}>No Data Available</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{display: \"flex\", marginLeft: isMobile? \"6%\" : \"\", justifyContent: \"center\"}}>\r\n        <p>Total Count: <b>{addCommas(cumalativeSum)}</b></p>\r\n        <p style={{paddingLeft: \"1vw\"}}>% of US Population: <b>{(cumalativeSum / USPopulation * 100).toFixed(4)}%</b></p>\r\n      </div>\r\n      <div style={{display: \"flex\",  justifyContent: \"center\"}}>\r\n        <div style={{width: \"75%\"}}>\r\n        <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n          <Geographies geography={geoUrl}>\r\n          {({ geographies }) => (\r\n            <>\r\n              {geographies.map(geo => {\r\n                const cur = allStates.find(s => s.val === geo.id);\r\n                return (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    fill={cur && cur.data[0] ? colorScale(getRate(cur.val, cur.data[0].count)) : \"#A9A9A9\"}\r\n                    onClick={handleClick(geo.id)}\r\n                    onMouseEnter={() => {\r\n                      let state = allStates.filter(state => state.val === geo.id);\r\n                      let toolContent = <p>{state_names[state[0].id] + \": N/A\"}</p> \r\n                      if (state[0].data.length)\r\n                        toolContent = \r\n                          <div style={{fontSize: isMobile? \"6px\" : \"\"}}>\r\n                            <u>{state_names[state[0].id]}</u>\r\n                            <p>{\"Count: \" + addCommas(state[0].data[0].count)}</p>\r\n                            <p>{\"% of state population: \" + getRate(geo.id, state[0].data[0].count).toFixed(4) +\"%\"}</p>\r\n                          </div>;\r\n                      props.setTooltipContent(toolContent);\r\n                      setHighlightBox(cur && cur.data[0] ? colorScale(getRate(cur.val, cur.data[0].count)) : \"#A9A9A9\");\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      props.setTooltipContent(\"\");\r\n                      setHighlightBox(\"\");\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n              {geographies.map(geo => {\r\n                const centroid = geoCentroid(geo);\r\n                const cur = allStates.find(s => s.val === geo.id);\r\n                return (\r\n                  <g key={geo.rsmKey + \"-name\"}>\r\n                    {cur &&\r\n                      centroid[0] > -160 &&\r\n                      centroid[0] < -67 &&\r\n                      (Object.keys(offsets).indexOf(cur.id) === -1 ? (\r\n                        <Marker coordinates={centroid}>\r\n                          <text y=\"2\" fontSize={14} textAnchor=\"middle\">\r\n                            {cur.id}\r\n                          </text>\r\n                        </Marker>\r\n                      ) : (\r\n                        <Annotation\r\n                          subject={centroid}\r\n                          dx={offsets[cur.id][0]}\r\n                          dy={offsets[cur.id][1]}\r\n                        >\r\n                          <text x={4} fontSize={14} alignmentBaseline=\"middle\">\r\n                            {cur.id}\r\n                          </text>\r\n                        </Annotation>\r\n                      ))}\r\n                  </g>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        </Geographies>\r\n        </ComposableMap>\r\n        </div>\r\n        {legend()}\r\n      </div>\r\n    <Time selectDate={setSelectedTime}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\n\r\n  /*function filterLatest(){\r\n    let latest = [];\r\n    props.data.forEach(field => {\r\n        let newData = [];\r\n        field.data.forEach(row => {\r\n            newData.push({...row, data: row.data.slice(row.data.length - 1)});\r\n        });\r\n        latest.push({...field, data: newData});\r\n    });\r\n    return latest;\r\n  }*/\r\n\r\n  /*function setDateRange(states) {\r\n    let dates = [];\r\n    states.forEach(state => {\r\n      state.data.forEach(data => dates.push(new Date(data.date)));\r\n    });\r\n    let maxDate = new Date(Math.max.apply(null,dates));\r\n    let minDate = new Date(Math.min.apply(null,dates));\r\n    setStartDate(minDate);\r\n    setEndDate(maxDate);\r\n  }*/\r\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js",[],["50","51"],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx",["52"],"import { useState, useEffect } from 'react';\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport { SliderRail, Handle, Track, Tick } from \"./components\"; // example render components - source below\r\nimport { startOfToday, format } from \"date-fns\";\r\nimport { scaleTime } from \"d3-scale\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst sliderStyle = {\r\n  position: \"relative\",\r\n  width: \"100%\"\r\n};\r\n\r\nfunction formatTick(ms) {\r\n  return format(new Date(ms), \"MMM dd\");\r\n}\r\n\r\nconst timeStep = 1000 * 60 * 1440;\r\n\r\nexport default function Time(props) {\r\n\r\n    const today = startOfToday();\r\n\r\n    const [selected, setSelected] = useState(today);\r\n    const [min, setMin] = useState(new Date(\"12/14/2020\"));\r\n    const [max, setMax] = useState(today);\r\n\r\n\r\n    const isTablet = useMediaQuery({ query: `(max-width: 1400px)` });\r\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\r\n   \r\n\r\n    function onChange([ms]) {\r\n        setSelected(new Date(ms));\r\n        props.selectDate(format(new Date(ms), \"MM/dd/yyyy\"));\r\n    };\r\n\r\n    function renderDateTime(date) {\r\n        return (\r\n        <div\r\n            style={{\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            fontFamily: \"Arial\",\r\n            marginTop: isMobile? \"-15%\" : \"\"\r\n            }}\r\n        >\r\n        {isMobile? \r\n        <div>\r\n             <div style={{ fontSize: 15, paddingBottom: \"1em\" }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\r\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\r\n                <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\r\n                <DatePicker\r\n                    selected={min}\r\n                    onSelect={(date) => setMin(date)} //when day is clicked\r\n                // onChange={handleDateChange} //only when value has changed\r\n                />\r\n                <div style={{paddingTop: \"1em\"}}></div>\r\n                <label style={{padding: \"0.1em\"}}>Set End Date: </label>\r\n                <DatePicker\r\n                    selected={max}\r\n                    onSelect={(date) => setMax(date)} //when day is clicked\r\n                // onChange={handleDateChange} //only when value has changed\r\n                />\r\n                </div>\r\n            </div>\r\n            :\r\n            <div>\r\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\r\n                    <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\r\n                    <DatePicker\r\n                        selected={min}\r\n                        onSelect={(date) => setMin(date)} //when day is clicked\r\n                    // onChange={handleDateChange} //only when value has changed\r\n                    />\r\n                    <label style={{padding: \"0.1em\", marginLeft: \"2em\"}}>Set End Date: </label>\r\n                    <DatePicker\r\n                        selected={max}\r\n                        onSelect={(date) => setMax(date)} //when day is clicked\r\n                    // onChange={handleDateChange} //only when value has changed\r\n                    />\r\n                </div>\r\n                <div style={{ fontSize: 15 }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\r\n            </div>}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    const days = parseInt((max - min) / (1000 * 60 * 60 * 24), 10);\r\n\r\n    const dateTicks = scaleTime()\r\n      .domain([min, max])\r\n      .ticks(days > 50 || isTablet? 7 : days)\r\n      .map((d) => +d);\r\n\r\n    return (\r\n      <div>\r\n        {isMobile? \"\" : renderDateTime(selected)}\r\n        <div style={{ margin: \"5%\", height: 120, width: \"90%\" }}>\r\n          <Slider\r\n            mode={1}\r\n            step={timeStep}\r\n            domain={[+min, +max]}\r\n            rootStyle={sliderStyle}\r\n            onChange={onChange}\r\n            values={[+selected]}\r\n          >\r\n            <Rail>\r\n              {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n            </Rail>\r\n            <Handles>\r\n              {({ handles, getHandleProps }) => (\r\n                <div>\r\n                  {handles.map((handle) => (\r\n                    <Handle\r\n                      key={handle.id}\r\n                      handle={handle}\r\n                      domain={[+min, +max]}\r\n                      getHandleProps={getHandleProps}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Handles>\r\n            <Tracks right={false}>\r\n              {({ tracks, getTrackProps }) => (\r\n                <div>\r\n                  {tracks.map(({ id, source, target }) => (\r\n                    <Track\r\n                      key={id}\r\n                      source={source}\r\n                      target={target}\r\n                      getTrackProps={getTrackProps}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Tracks>\r\n            <Ticks values={dateTicks}>\r\n              {({ ticks }) => (\r\n                <div>\r\n                  {ticks.map((tick) => (\r\n                    <Tick\r\n                      key={tick.id}\r\n                      tick={tick}\r\n                      count={ticks.length}\r\n                      format={formatTick}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Ticks>\r\n          </Slider>\r\n        </div>\r\n        {isMobile? renderDateTime(selected) : \"\"}\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Home.jsx",["53","54","55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":35,"column":32,"nodeType":"67","messageId":"68","endLine":35,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":41,"column":32,"nodeType":"67","messageId":"68","endLine":41,"endColumn":34},{"ruleId":"61","severity":1,"message":"69","line":49,"column":26,"nodeType":"63","messageId":"64","endLine":49,"endColumn":27},{"ruleId":"70","severity":1,"message":"71","line":94,"column":8,"nodeType":"72","endLine":94,"endColumn":10,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":93,"column":6,"nodeType":"72","endLine":93,"endColumn":18,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"76","line":102,"column":6,"nodeType":"72","endLine":102,"endColumn":19,"suggestions":"77"},{"ruleId":"70","severity":1,"message":"78","line":107,"column":6,"nodeType":"72","endLine":107,"endColumn":20,"suggestions":"79"},{"ruleId":"57","replacedBy":"80"},{"ruleId":"59","replacedBy":"81"},{"ruleId":"61","severity":1,"message":"82","line":1,"column":20,"nodeType":"63","messageId":"64","endLine":1,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":23,"column":86,"nodeType":"85","endLine":24,"endColumn":120},{"ruleId":"83","severity":1,"message":"84","line":40,"column":21,"nodeType":"85","endLine":40,"endColumn":85},{"ruleId":"83","severity":1,"message":"84","line":43,"column":21,"nodeType":"85","endLine":43,"endColumn":87},{"ruleId":"83","severity":1,"message":"84","line":46,"column":21,"nodeType":"85","endLine":46,"endColumn":96},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'Vaccine' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'filterDate', 'makeContinuous', and 'props.title'. Either include them or remove the dependency array.",["89"],"React Hook useEffect has missing dependencies: 'filterDate', 'makeContinuous', 'props.data', and 'selectedTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'selectedTime'.",["90"],"React Hook useEffect has missing dependencies: 'filterDate' and 'timeSeries'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'timeSeries'.",["91"],["86"],["87"],"'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [transformData]",{"range":"100","text":"101"},"Update the dependencies array to be: [filterDate, makeContinuous, props.data, props.title]",{"range":"102","text":"103"},"Update the dependencies array to be: [filterDate, makeContinuous, props.data, props.title, selectedTime]",{"range":"104","text":"105"},"Update the dependencies array to be: [filterDate, selectedTime, timeSeries]",{"range":"106","text":"107"},[3408,3410],"[transformData]",[2869,2881],"[filterDate, makeContinuous, props.data, props.title]",[3144,3157],"[filterDate, makeContinuous, props.data, props.title, selectedTime]",[3281,3295],"[filterDate, selectedTime, timeSeries]"]