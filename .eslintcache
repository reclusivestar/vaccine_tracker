[{"/Users/tanmaykumar/vaccine_tracker/src/index.js":"1","/Users/tanmaykumar/vaccine_tracker/src/reportWebVitals.js":"2","/Users/tanmaykumar/vaccine_tracker/src/App.js":"3","/Users/tanmaykumar/vaccine_tracker/src/Home.jsx":"4","/Users/tanmaykumar/vaccine_tracker/src/Vaccine/Vaccine.jsx":"5","/Users/tanmaykumar/vaccine_tracker/src/Map/Map.jsx":"6","/Users/tanmaykumar/vaccine_tracker/src/Map/Time.jsx":"7","/Users/tanmaykumar/vaccine_tracker/src/Map/components.js":"8"},{"size":500,"mtime":1621817052541,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1621817052546,"results":"11","hashOfConfig":"10"},{"size":117,"mtime":1621817052538,"results":"12","hashOfConfig":"10"},{"size":2650,"mtime":1621817052539,"results":"13","hashOfConfig":"10"},{"size":5371,"mtime":1621822677801,"results":"14","hashOfConfig":"10"},{"size":12878,"mtime":1621823218346,"results":"15","hashOfConfig":"10"},{"size":5683,"mtime":1621823097743,"results":"16","hashOfConfig":"10"},{"size":4556,"mtime":1621817052540,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"h5wp0t",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tanmaykumar/vaccine_tracker/src/index.js",[],["39","40"],"/Users/tanmaykumar/vaccine_tracker/src/reportWebVitals.js",[],"/Users/tanmaykumar/vaccine_tracker/src/App.js",[],"/Users/tanmaykumar/vaccine_tracker/src/Home.jsx",["41","42","43","44"],"import React, { useRef } from 'react'\nimport {\n  Hero, ScrollDownIndicator\n} from 'react-landing-page';\nimport Vaccine from './Vaccine/Vaccine';\nimport heroImage from './media/vaccine.png';\nimport linkedin from './media/linkedin.png';\nimport github from './media/github.png';\nimport portfolio from './media/portfolio.png'\nimport { useMediaQuery } from 'react-responsive';\n \nexport default function Home() {\n    const myRef = useRef(null);\n    const executeScroll = () => myRef.current.scrollIntoView({ behavior: \"smooth\" });\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\n    return (\n        <div>\n            <Hero\n            color=\"white\"\n            backgroundImage={heroImage}\n            >\n                <h1 style={{fontSize: isMobile? \"2em\" : \"5em\", fontWeight: \"lighter\", textAlign: \"center\"}}>COVID-19 Vaccine Tracker</h1>\n                <h3 style={{fontWeight: \"lighter\"}}>Source: John Hopkins University  <a style = {{color: \"white\"}}\n                href=\"https://github.com/govex/COVID-19/tree/master/data_tables/vaccine_data/raw_data\" target=\"_blank\">\n                (Data)</a>\n                <br />\n                Web development: Tanmay Kumar \n                </h3>\n                <br />\n                <i>Updated Daily</i>\n\n                <ScrollDownIndicator style={{cursor: \"pointer\"}} onClick={executeScroll}/>\n            </Hero>\n            <div style={{marginTop: \"2em\"}} ref={myRef}>\n                <Vaccine  />\n            </div>\n            <footer style={{ display: \"flex\", justifyContent: \"center\", \n            color: \"white\", textAlign: \"center\", background: \"black\", flexShrink: \"0\", padding: \"20px\"}} class=\"footer\">\n                <div style={{marginLeft: \"-1vw\"}}>\n                    <a href=\"https://www.linkedin.com/in/tkumar01/\" target=\"_blank\">\n                    <img style={{paddingRight: \"1em\"}} width={\"30em\"} src={linkedin} alt=\"linkedin\" /> \n                    </a>\n                    <a href=\"https://portfolio-tanmay.herokuapp.com/\" target=\"_blank\">\n                    <img style={{paddingRight: \"1em\"}} width={\"30em\"} src={portfolio} alt=\"portfolio\" /> \n                    </a>\n                    <a href=\"https://github.com/reclusivestar/vaccine_tracker\" target=\"_blank\">\n                    <img width={\"30em\"} src={github} alt=\"github\" /> \n                    </a>\n                    <div style={{fontWeight: \"lighter\"}}>\n                    <p>Contact: tanmaysk1@gmail.com</p>\n                    <p>Sponsored by: Samuchit Consultancy Service India Pvt Ltd.</p>\n                    </div>\n                </div>\n            </footer>\n        </div>\n    );\n}","/Users/tanmaykumar/vaccine_tracker/src/Vaccine/Vaccine.jsx",["45","46","47","48"],"import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport Map from '../Map/Map';\nimport states from '../Map/states.json';\nimport ReactTooltip from 'react-tooltip';\nimport { useMediaQuery } from 'react-responsive';\n\nexport default function Vaccine() {\n\n    const url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/archive/vaccine_data_us_state_timeline.csv\";\n    const definitions_url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/archive/data_dictionary.csv\";\n\n    const [allData, setAllData] = useState([]); //in time series\n    const [subject, setSubject] = useState(\"doses_admin_total\");\n    const [allTitles, setAllTitles] = useState([]);\n    const [allDefinitions, setAllDefinitions] = useState([]);\n    const [content, setContent] = useState(\"\");\n\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\n    \n    function extractTitles(allData) {\n        const titles = [];\n        allData.forEach(data => {\n            titles.push(data.title)\n        })\n        setAllTitles(titles);\n    }\n\n    function formatTitle(title){\n        if (title === \"people_total\")\n            return \"People Total 1st Dose\";\n\n        let newTitle = title.split('_');\n        newTitle.map((word, i) => {\n            if (word === \"alloc\")\n                newTitle[i] = \"allocated\";\n            if (word === \"admin\")\n                newTitle[i] = \"administered\";\n        })\n        newTitle.map((word, i) => {\n            newTitle[i] = word[0].toUpperCase() + word.substring(1);\n        })\n        return newTitle.join(' ');\n    }\n    \n    function transformData(raw){\n        let results = [];\n        for (const [key, _] of Object.entries(raw.data[0])) {\n            let field = {};\n            field[\"title\"] = key;\n            field[\"data\"] = [];\n            results.push(field);\n        }\n        // filter empty data for each key\n\n        for (let i = 4; i < results.length; i++){\n            raw.data.forEach(field => {\n                if (field[results[i].title] !== \"\" && field[results[i].title] !== undefined\n                 && field[results[i].title] !== \" \"){\n                    results[i].data.push([field[\"date\"], field[\"stabbr\"], field[results[i].title]]);\n                }\n            })\n        }\n        let valid_results = results.slice(4);\n        console.log(valid_results);\n        extractTitles(valid_results);\n        getDataByState(valid_results);\n    }\n\n    function transformDataDefinitions(csv){\n        let definitions = [];\n        csv.data.forEach(col => {\n            definitions.push(col);\n        });\n        setAllDefinitions(definitions.slice(4, definitions.length - 1));\n    }\n\n    useEffect(() => {\n        async function fetchCSV(){\n            const csv = await axios.get(url).then(response => \n                Papa.parse(response.data,\n                          { header: true }));\n            transformData(csv);\n        }\n        async function fetchDefinitions(){\n            const csv = await axios.get(definitions_url).then(response => \n                Papa.parse(response.data,\n                          { header: true }));\n            transformDataDefinitions(csv);\n        }\n        fetchCSV();\n        fetchDefinitions();\n    }, []);\n\n    function filterState(raw, state){\n        let latest = [];\n        raw.forEach(row => {\n            let field = {};\n            field[\"title\"] = row.title;\n            field[\"data\"] = [];\n            latest.push(field);\n        });\n        latest.forEach((field, i) => {\n            field.data = raw[i].data.filter(data => data[1] === state);\n        });\n        return latest;\n    };\n\n    function getDataByState(data){\n        let latest_all = [];\n        states.forEach(state => {\n            latest_all.push({\"id\" : state.id, \"val\" : state.val, data : filterState(data, state.id)});\n        });\n        setAllData(latest_all);\n    }\n\n    function getDefinition() {\n        let data = allDefinitions.filter(def => def.column_name === subject)[0];\n        if (data)\n            return data.definition;\n    }\n\n    function chooseSubject(){\n        return (\n            <div style={{display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}> \n                <div style={{padding: \"1.4vw\"}}>\n                    <label style={{paddingLeft: isMobile? \"5%\" : \"\"}} for=\"titles\">Filter Data: </label>\n                    <select name=\"titles\" id=\"titles\" onChange={(e) => setSubject(e.target.value)} value={subject}>\n                    {allTitles.map(title => {\n                        return(\n                            <option value={title}>{formatTitle(title)}</option>\n                        )}\n                    )}\n                    </select>\n                </div>\n                <div style={{textAlign: isMobile? \"center\" : \"\"}}>\n                    <h2 style={{fontWeight: \"lighter\"}}>{getDefinition()}</h2>\n                </div>\n            </div>\n        );\n    }\n\n    console.log(allData);\n    console.log(subject);\n    return ( \n        <div style={{marginLeft: isMobile? \"5%\" : \"18%\", width: isMobile? \"90%\" : \"60%\"}}>\n            {chooseSubject()}\n            <Map data={allData} title={subject} setTooltipContent={setContent}/>\n            <ReactTooltip>{content}</ReactTooltip>\n        </div>\n    );\n}","/Users/tanmaykumar/vaccine_tracker/src/Map/Map.jsx",["49","50","51","52","53"],"import { useState, useEffect } from \"react\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation\n  } from \"react-simple-maps\";\nimport { scaleQuantize } from \"d3-scale\";\nimport { extent } from \"d3-array\";\nimport { geoCentroid } from \"d3-geo\";\nimport axios from 'axios';\nimport Time from './Time';\nimport { startOfToday, format } from \"date-fns\";\nimport state_names from './states_hash.json';\nimport { useMediaQuery } from 'react-responsive';\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21]\n};\n\nconst Map = (props) => {\n  const url = \"https://datausa.io/api/data?drilldowns=State&measures=Population\";\n  const us_population_url = \"https://datausa.io/api/data?drilldowns=Nation&measures=Population\";\n  const [allStates, setAllStates] = useState([]);\n  const [timeSeries, setTimeSeries] = useState([]);\n  const [populations, setPopulations] = useState([]);\n  const [USPopulation, setUSPopulation] = useState([]);\n  const [selectedTime, setSelectedTime] = useState();\n  const [cumalativeSum, setCumalativeSum] = useState(0);\n  const [highlightBox, setHighlightBox] = useState(\"\");\n  const [latestData, setLatestData] = useState([]);\n\n  const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\n\n  const colors = [\"#f0f9e8\", \"#97d5c0\", \"#4ba8c9\", \"#1d79b5\", \"#254b8c\"]; \n  /* [\"#ffedea\", \"#ffcec5\", \"#ffad9f\", \"#ff8a75\", \n  \"#ff5533\", \"#e2492d\", \"#be3d26\", \"#9a311f\", \"#782618\"];*/\n\n  function extractNumbers() {\n    let data = [];\n    timeSeries.forEach(state => {\n      if (state.data[0]){\n        state.data.forEach(date => \n          data.push(getRate(state.val, date.count))\n        );\n      }\n    });\n    return data;\n  }\n\n  const colorScale = scaleQuantize()\n  .domain(extent(extractNumbers())).nice()\n  .range(colors);\n  \n  function extractDomain(){\n    const domains = [];\n    colors.forEach(color => \n      domains.push({\"color\" : color, \"range\" : colorScale.invertExtent(color)})\n    );\n    return domains;\n  }\n\n  async function getAllPopulations(){\n    const response = await axios.get(url); \n    setPopulations(response.data.data);\n  }\n  async function getUSPopulation(){\n    const response = await axios.get(us_population_url); \n    setUSPopulation(parseInt(response.data.data[0].Population));\n  }\n\n  const findFirstDiff = (str1, str2) =>\n  str2[[...str1].findIndex((el, index) => el !== str2[index])];\n\n\n  //set defaults when map first loads\n  useEffect(() => {\n    console.log(props.data)\n    let data = filterField(props.data, props.title);\n    //data = makeContinuous(data);\n    let UStime = new Date(\"02/26/2021\").toLocaleString(\"es-PA\", {timeZone: \"America/Los_Angeles\"});\n    UStime = UStime.split(\" \")[0];\n    setSelectedTime(UStime);\n    setTimeSeries(data);\n    setAllStates(filterDate(data, UStime));\n    getAllPopulations();\n    getUSPopulation();\n    setLatestData(filterField(filterLatest(), props.title));\n  }, [props.data]);\n\n  //changes based on the data selected\n  useEffect(() => {\n    let data = filterField(props.data, props.title);\n    //data = makeContinuous(data);\n    setTimeSeries(data);\n    setAllStates(filterDate(data, selectedTime));\n    getAllPopulations();\n    setLatestData(filterField(filterLatest(), props.title));\n  }, [props.title])\n\n  //changes based on time selected\n  useEffect(() => {\n    setAllStates(filterDate(timeSeries, selectedTime));\n  }, [selectedTime]);\n\n  function getRate(val, count){\n    let pop = populations.filter(state => state[\"ID State\"].slice(-2) === val)[0];\n    if (pop) //some states not in population data\n      return count / parseInt(pop.Population) * 100;\n    return 0;\n  }\n\n  function filterLatest(){\n    let latest = [];\n    props.data.forEach(field => {\n        let newData = [];\n        field.data.forEach(row => {\n            newData.push({...row, data: row.data.slice(row.data.length - 1)});\n        });\n        latest.push({...field, data: newData});\n    });\n    return latest;\n  }\n\n  function filterField(allData, title){\n    let filtered = [];\n    allData.forEach(field => {\n      let onlyData = field.data.filter(row => row.title === title)[0].data;\n      let parsed = [];\n      if (onlyData){\n          parsed = onlyData.map(val => {\n              return {\"date\" : val[0], \"count\" : parseInt(val[2])};\n          });\n      }\n      filtered.push({...field, data: parsed});\n    });\n    return filtered;\n  }\n\n  //update with days until today copying the last provided data\n  function expandUntilToday(allData){\n    allData.forEach(state => {\n      if (state.data.length) {\n        let latest = new Date(state.data[state.data.length - 1].date);\n        let latestCount = state.data[state.data.length - 1].count\n        let days = parseInt((startOfToday() - latest) / (1000 * 60 * 60 * 24), 10);\n        while (days > 0) {\n          latest.setDate(latest.getDate() + 1);\n          state.data.push({\n            date : format(latest, \"MM/dd/yyyy\"),\n            count: latestCount\n          });\n          days--;\n        }\n      }\n    })\n    return allData;\n  }\n\n  // fill gaps between first and second date with data from the first\n  function makeContinuous(allData){\n    let continuous = [];\n    allData.forEach(state => {\n      let newIndex = 0;\n      let newState = {...state};\n      newState.data = Array.from(state.data);\n      for (let i = 0; i + 1 < state.data.length; i++){\n        let start = new Date(state.data[i].date);\n        let end = new Date(state.data[i+1].date);\n        let days = parseInt((end - start) / (1000 * 60 * 60 * 24), 10);\n        while (days > 1){\n          newIndex++;\n          start.setDate(start.getDate() + 1);\n          newState.data.splice(newIndex, 0, {\n            date: format(start, \"MM/dd/yyyy\"),\n            count: state.data[i].count\n          });\n          days--;\n        }\n        newIndex++;\n      }\n      continuous.push(newState);\n    });\n    return expandUntilToday(continuous);\n  }\n\n  function filterDate(data, date) {\n    let filtered = [];\n    data.forEach(state => {\n      let newData = state.data.filter(data => data.date === date);\n      filtered.push({...state, data: newData});\n    });\n    console.log(filtered, date);\n    getSum(filtered);\n    return filtered;\n  }\n\n  function getSum(data){\n    let sum = 0;\n    data.forEach(state => {\n      if(state.data.length)\n        sum += state.data[0].count;\n    })\n    setCumalativeSum(sum);\n  }\n\n  const handleClick = val => () => {\n    let state = allStates.filter(state => state.val === val);\n    if (state[0].data.length)\n      console.log(getRate(val, state[0].data[0].count));\n    console.log(state);\n  };\n\n  function addCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  function getLatest(val) {\n    let state = latestData.find(state => state.val === val);\n    if (state.data.length)\n      return state;\n    return 0;\n  }\n\n  console.log(allStates);\n  console.log(timeSeries);\n  console.log(latestData);\n\n  function legend(){\n    let domains = extractDomain();\n    console.log(domains);\n    return (\n      <div style={{marginLeft: \"5%\", marginTop: isMobile? \"5%\" : \"10%\"}}>\n        {domains.map((domain, i) => {\n          let low = Math.round((domain.range[0] + Number.EPSILON) * 100) / 100;\n          let high = Math.round((domain.range[1] + Number.EPSILON) * 100) / 100;\n          return (\n            <div style={{display: \"flex\"}}>\n              {highlightBox === colors[i] ? \n              <div style={{ backgroundColor: colors[i], padding: isMobile? \"0.2em\" : \"0.5vw\", outline: \"3px solid red\" }} key={i}></div>\n              :\n              <div style={{ backgroundColor: colors[i], padding: isMobile? \"0.2em\" : \"0.5vw\" }} key={i}></div>}\n              <p style={{fontSize: isMobile? \"6px\" : \"0.6vw\", marginLeft: \"1vw\"}}>{low}% - {high}%</p>\n            </div>\n          )}\n        )}\n        <div style={{display: \"flex\", marginTop: \"1vw\"}}>\n          {highlightBox === \"#A9A9A9\" ? \n          <div style={{ backgroundColor: \"#A9A9A9\", padding: isMobile? \"0.2em\" : \"0.5vw\", outline: \"3px solid red\" }}></div>\n          :\n          <div style={{ backgroundColor: \"#A9A9A9\", padding: isMobile? \"0.2em\" : \"0.5vw\" }}></div>}\n          <p style={{fontSize: isMobile? \"5px\" : \"0.6vw\", marginLeft: \"1vw\"}}>No Data Available</p>\n        </div>\n      </div>\n    );\n  }\n\n  function formatToolTip(val) {\n    let state = allStates.filter(state => state.val === val);\n    let toolContent = <p>{state_names[state[0].id] + \": N/A\"}</p> \n    let latestInfo = getLatest(val);\n    if (latestInfo)\n      toolContent = \n      <div style={{fontSize: isMobile? \"6px\" : \"\"}}>\n        <u>{state_names[latestInfo.id] + \": N/A\"}</u>\n        <p><i>{\"Data Last Available: \" + latestInfo.data[0].date}</i></p>\n        <p><i>{\"Last Count: \" + addCommas(latestInfo.data[0].count)}</i></p>\n        <p><i>{\"% of state population: \" + getRate(latestInfo.val, latestInfo.data[0].count).toFixed(4) +\"%\"}</i></p>\n      </div>\n\n    if (state[0].data.length)\n      toolContent = \n        <div style={{fontSize: isMobile? \"6px\" : \"\"}}>\n          <u>{state_names[state[0].id]}</u>\n          <p>{\"Count: \" + addCommas(state[0].data[0].count)}</p>\n          <p>{\"% of state population: \" + getRate(val, state[0].data[0].count).toFixed(4) +\"%\"}</p>\n        </div>;\n    return toolContent;\n  }\n\n  return (\n    <div>\n      <div style={{display: \"flex\", marginLeft: isMobile? \"6%\" : \"\", justifyContent: \"center\"}}>\n        <p>Total Count: <b>{addCommas(cumalativeSum)}</b></p>\n        <p style={{paddingLeft: \"1vw\"}}>% of US Population: <b>{(cumalativeSum / USPopulation * 100).toFixed(4)}%</b></p>\n      </div>\n      <div style={{display: \"flex\",  justifyContent: \"center\"}}>\n        <div style={{width: \"75%\"}}>\n        <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n          <Geographies geography={geoUrl}>\n          {({ geographies }) => (\n            <>\n              {geographies.map(geo => {\n                const cur = allStates.find(s => s.val === geo.id);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={cur && cur.data[0] ? colorScale(getRate(cur.val, cur.data[0].count)) : \"#A9A9A9\"}\n                    onClick={handleClick(geo.id)}\n                    onMouseEnter={() => {\n                      props.setTooltipContent(formatToolTip(geo.id));\n                      setHighlightBox(cur && cur.data[0] ? colorScale(getRate(cur.val, cur.data[0].count)) : \"#A9A9A9\");\n                    }}\n                    onMouseLeave={() => {\n                      props.setTooltipContent(\"\");\n                      setHighlightBox(\"\");\n                    }}\n                  />\n                );\n              })}\n              {geographies.map(geo => {\n                const centroid = geoCentroid(geo);\n                const cur = allStates.find(s => s.val === geo.id);\n                return (\n                  <g key={geo.rsmKey + \"-name\"}>\n                    {cur &&\n                      centroid[0] > -160 &&\n                      centroid[0] < -67 &&\n                      (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                        <Marker coordinates={centroid}>\n                          <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                            {cur.id}\n                          </text>\n                        </Marker>\n                      ) : (\n                        <Annotation\n                          subject={centroid}\n                          dx={offsets[cur.id][0]}\n                          dy={offsets[cur.id][1]}\n                        >\n                          <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                            {cur.id}\n                          </text>\n                        </Annotation>\n                      ))}\n                  </g>\n                );\n              })}\n            </>\n          )}\n        </Geographies>\n        </ComposableMap>\n        </div>\n        {legend()}\n      </div>\n    <Time selectDate={setSelectedTime}/>\n    </div>\n  );\n};\n\nexport default Map;\n\n\n  /*function filterLatest(){\n    let latest = [];\n    props.data.forEach(field => {\n        let newData = [];\n        field.data.forEach(row => {\n            newData.push({...row, data: row.data.slice(row.data.length - 1)});\n        });\n        latest.push({...field, data: newData});\n    });\n    return latest;\n  }*/\n\n  /*function setDateRange(states) {\n    let dates = [];\n    states.forEach(state => {\n      state.data.forEach(data => dates.push(new Date(data.date)));\n    });\n    let maxDate = new Date(Math.max.apply(null,dates));\n    let minDate = new Date(Math.min.apply(null,dates));\n    setStartDate(minDate);\n    setEndDate(maxDate);\n  }*/\n","/Users/tanmaykumar/vaccine_tracker/src/Map/Time.jsx",["54","55"],"import { useState, useEffect } from 'react';\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\nimport { SliderRail, Handle, Track, Tick } from \"./components\"; // example render components - source below\nimport { startOfToday, format } from \"date-fns\";\nimport { scaleTime } from \"d3-scale\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useMediaQuery } from 'react-responsive';\n\nconst sliderStyle = {\n  position: \"relative\",\n  width: \"100%\"\n};\n\nfunction formatTick(ms) {\n  return format(new Date(ms), \"MMM dd\");\n}\n\nconst timeStep = 1000 * 60 * 1440;\n\nexport default function Time(props) {\n\n    let UStime = new Date(\"02/26/2021\").toLocaleString(\"es-PA\", {timeZone: \"America/Los_Angeles\"});\n    UStime = UStime.split(\" \")[0];\n    const today = new Date(UStime);\n    const [selected, setSelected] = useState(today);\n    const [min, setMin] = useState(new Date(\"12/14/2020\"));\n    const [max, setMax] = useState(today);\n\n\n    const isTablet = useMediaQuery({ query: `(max-width: 1400px)` });\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\n   \n\n    function onChange([ms]) {\n        setSelected(new Date(ms));\n        props.selectDate(format(new Date(ms), \"MM/dd/yyyy\"));\n    };\n\n    function renderDateTime(date) {\n        return (\n        <div\n            style={{\n            width: \"100%\",\n            textAlign: \"center\",\n            fontFamily: \"Arial\",\n            marginTop: isMobile? \"-15%\" : \"\"\n            }}\n        >\n        {isMobile? \n        <div>\n             <div style={{ fontSize: 15, paddingBottom: \"1em\" }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\n                <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\n                <DatePicker\n                    selected={min}\n                    onSelect={(date) => setMin(date)} //when day is clicked\n                // onChange={handleDateChange} //only when value has changed\n                />\n                <div style={{paddingTop: \"1em\"}}></div>\n                <label style={{padding: \"0.1em\"}}>Set End Date: </label>\n                <DatePicker\n                    selected={max}\n                    onSelect={(date) => setMax(date)} //when day is clicked\n                // onChange={handleDateChange} //only when value has changed\n                />\n                </div>\n            </div>\n            :\n            <div>\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\n                    <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\n                    <DatePicker\n                        selected={min}\n                        onSelect={(date) => setMin(date)} //when day is clicked\n                    // onChange={handleDateChange} //only when value has changed\n                    />\n                    <label style={{padding: \"0.1em\", marginLeft: \"2em\"}}>Set End Date: </label>\n                    <DatePicker\n                        selected={max}\n                        onSelect={(date) => setMax(date)} //when day is clicked\n                    // onChange={handleDateChange} //only when value has changed\n                    />\n                </div>\n                <div style={{ fontSize: 15 }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\n            </div>}\n        </div>\n        );\n    }\n\n    const days = parseInt((max - min) / (1000 * 60 * 60 * 24), 10);\n\n    const dateTicks = scaleTime()\n      .domain([min, max])\n      .ticks(days > 50 || isTablet? 7 : days)\n      .map((d) => +d);\n\n    return (\n      <div>\n        {isMobile? \"\" : renderDateTime(selected)}\n        <div style={{ margin: \"5%\", height: 120, width: \"90%\" }}>\n          <Slider\n            mode={1}\n            step={timeStep}\n            domain={[+min, +max]}\n            rootStyle={sliderStyle}\n            onChange={onChange}\n            values={[+selected]}\n          >\n            <Rail>\n              {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\n            </Rail>\n            <Handles>\n              {({ handles, getHandleProps }) => (\n                <div>\n                  {handles.map((handle) => (\n                    <Handle\n                      key={handle.id}\n                      handle={handle}\n                      domain={[+min, +max]}\n                      getHandleProps={getHandleProps}\n                    />\n                  ))}\n                </div>\n              )}\n            </Handles>\n            <Tracks right={false}>\n              {({ tracks, getTrackProps }) => (\n                <div>\n                  {tracks.map(({ id, source, target }) => (\n                    <Track\n                      key={id}\n                      source={source}\n                      target={target}\n                      getTrackProps={getTrackProps}\n                    />\n                  ))}\n                </div>\n              )}\n            </Tracks>\n            <Ticks values={dateTicks}>\n              {({ ticks }) => (\n                <div>\n                  {ticks.map((tick) => (\n                    <Tick\n                      key={tick.id}\n                      tick={tick}\n                      count={ticks.length}\n                      format={formatTick}\n                    />\n                  ))}\n                </div>\n              )}\n            </Ticks>\n          </Slider>\n        </div>\n        {isMobile? renderDateTime(selected) : \"\"}\n      </div>\n    );\n}\n","/Users/tanmaykumar/vaccine_tracker/src/Map/components.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":23,"column":86,"nodeType":"62","endLine":24,"endColumn":120},{"ruleId":"60","severity":1,"message":"61","line":40,"column":21,"nodeType":"62","endLine":40,"endColumn":85},{"ruleId":"60","severity":1,"message":"61","line":43,"column":21,"nodeType":"62","endLine":43,"endColumn":87},{"ruleId":"60","severity":1,"message":"61","line":46,"column":21,"nodeType":"62","endLine":46,"endColumn":96},{"ruleId":"63","severity":1,"message":"64","line":35,"column":32,"nodeType":"65","messageId":"66","endLine":35,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":41,"column":32,"nodeType":"65","messageId":"66","endLine":41,"endColumn":34},{"ruleId":"67","severity":1,"message":"68","line":49,"column":26,"nodeType":"69","messageId":"70","endLine":49,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":94,"column":8,"nodeType":"73","endLine":94,"endColumn":10,"suggestions":"74"},{"ruleId":"67","severity":1,"message":"75","line":83,"column":9,"nodeType":"69","messageId":"70","endLine":83,"endColumn":22},{"ruleId":"71","severity":1,"message":"76","line":100,"column":6,"nodeType":"73","endLine":100,"endColumn":18,"suggestions":"77"},{"ruleId":"71","severity":1,"message":"78","line":110,"column":6,"nodeType":"73","endLine":110,"endColumn":19,"suggestions":"79"},{"ruleId":"71","severity":1,"message":"80","line":115,"column":6,"nodeType":"73","endLine":115,"endColumn":20,"suggestions":"81"},{"ruleId":"67","severity":1,"message":"82","line":172,"column":12,"nodeType":"69","messageId":"70","endLine":172,"endColumn":26},{"ruleId":"67","severity":1,"message":"83","line":1,"column":20,"nodeType":"69","messageId":"70","endLine":1,"endColumn":29},{"ruleId":"67","severity":1,"message":"84","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":22},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.","ArrayExpression",["87"],"'findFirstDiff' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filterDate', 'filterLatest', and 'props.title'. Either include them or remove the dependency array. If 'setLatestData' needs the current value of 'props.title', you can also switch to useReducer instead of useState and read 'props.title' in the reducer.",["88"],"React Hook useEffect has missing dependencies: 'filterDate', 'filterLatest', 'props.data', and 'selectedTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'selectedTime'.",["89"],"React Hook useEffect has missing dependencies: 'filterDate' and 'timeSeries'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'timeSeries'.",["90"],"'makeContinuous' is defined but never used.","'useEffect' is defined but never used.","'startOfToday' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [transformData]",{"range":"99","text":"100"},"Update the dependencies array to be: [filterDate, filterLatest, props.data, props.title]",{"range":"101","text":"102"},"Update the dependencies array to be: [filterDate, filterLatest, props.data, props.title, selectedTime]",{"range":"103","text":"104"},"Update the dependencies array to be: [filterDate, selectedTime, timeSeries]",{"range":"105","text":"106"},[3313,3315],"[transformData]",[3079,3091],"[filterDate, filterLatest, props.data, props.title]",[3408,3421],"[filterDate, filterLatest, props.data, props.title, selectedTime]",[3540,3554],"[filterDate, selectedTime, timeSeries]"]