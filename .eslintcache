[{"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js":"1","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js":"2","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js":"3","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx":"4","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx":"5","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js":"6","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx":"7","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Home.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":158,"mtime":1611276649365,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":5525,"mtime":1611200014524,"results":"13","hashOfConfig":"10"},{"size":11990,"mtime":1611292115783,"results":"14","hashOfConfig":"10"},{"size":4746,"mtime":1610923666397,"results":"15","hashOfConfig":"10"},{"size":5706,"mtime":1611199734593,"results":"16","hashOfConfig":"10"},{"size":2656,"mtime":1611291834114,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vi5i8c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js",[],["38","39"],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js",["40"],"import './App.css';\nimport Vaccine from './Vaccine/Vaccine';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx",["41","42","43","44"],"import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport axios from 'axios';\r\nimport Map from '../Map/Map';\r\nimport states from '../Map/states.json';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nexport default function Vaccine() {\r\n\r\n    const url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/vaccine_data_us_state_timeline.csv\";\r\n    const definitions_url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/data_dictionary.csv\";\r\n\r\n    const [allData, setAllData] = useState([]); //in time series\r\n    const [subject, setSubject] = useState(\"doses_admin_total\");\r\n    const [allTitles, setAllTitles] = useState([]);\r\n    const [allDefinitions, setAllDefinitions] = useState([]);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\r\n    \r\n    function extractTitles(allData) {\r\n        const titles = [];\r\n        allData.forEach(data => {\r\n            titles.push(data.title)\r\n        })\r\n        setAllTitles(titles);\r\n    }\r\n\r\n    function formatTitle(title){\r\n        if (title === \"people_total\")\r\n            return \"People Total 1st Dose\";\r\n\r\n        let newTitle = title.split('_');\r\n        newTitle.map((word, i) => {\r\n            if (word === \"alloc\")\r\n                newTitle[i] = \"allocated\";\r\n            if (word === \"admin\")\r\n                newTitle[i] = \"administered\";\r\n        })\r\n        newTitle.map((word, i) => {\r\n            newTitle[i] = word[0].toUpperCase() + word.substring(1);\r\n        })\r\n        return newTitle.join(' ');\r\n    }\r\n    \r\n    function transformData(raw){\r\n        let results = [];\r\n        for (const [key, _] of Object.entries(raw.data[0])) {\r\n            let field = {};\r\n            field[\"title\"] = key;\r\n            field[\"data\"] = [];\r\n            results.push(field);\r\n        }\r\n        // filter empty data for each key\r\n\r\n        for (let i = 4; i < results.length; i++){\r\n            raw.data.forEach(field => {\r\n                if (field[results[i].title] !== \"\" && field[results[i].title] !== undefined\r\n                 && field[results[i].title] !== \" \"){\r\n                    results[i].data.push([field[\"date\"], field[\"stabbr\"], field[results[i].title]]);\r\n                }\r\n            })\r\n        }\r\n        let valid_results = results.slice(4);\r\n        console.log(valid_results);\r\n        extractTitles(valid_results);\r\n        getDataByState(valid_results);\r\n    }\r\n\r\n    function transformDataDefinitions(csv){\r\n        let definitions = [];\r\n        csv.data.forEach(col => {\r\n            definitions.push(col);\r\n        });\r\n        setAllDefinitions(definitions.slice(4, definitions.length - 1));\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchCSV(){\r\n            const csv = await axios.get(url).then(response => \r\n                Papa.parse(response.data,\r\n                          { header: true }));\r\n            transformData(csv);\r\n        }\r\n        async function fetchDefinitions(){\r\n            const csv = await axios.get(definitions_url).then(response => \r\n                Papa.parse(response.data,\r\n                          { header: true }));\r\n            transformDataDefinitions(csv);\r\n        }\r\n        fetchCSV();\r\n        fetchDefinitions();\r\n    }, []);\r\n\r\n    function filterState(raw, state){\r\n        let latest = [];\r\n        raw.forEach(row => {\r\n            let field = {};\r\n            field[\"title\"] = row.title;\r\n            field[\"data\"] = [];\r\n            latest.push(field);\r\n        });\r\n        latest.forEach((field, i) => {\r\n            field.data = raw[i].data.filter(data => data[1] === state);\r\n        });\r\n        return latest;\r\n    };\r\n\r\n    function getDataByState(data){\r\n        let latest_all = [];\r\n        states.forEach(state => {\r\n            latest_all.push({\"id\" : state.id, \"val\" : state.val, data : filterState(data, state.id)});\r\n        });\r\n        setAllData(latest_all);\r\n    }\r\n\r\n    function getDefinition() {\r\n        let data = allDefinitions.filter(def => def.column_name === subject)[0];\r\n        if (data)\r\n            return data.definition;\r\n    }\r\n\r\n    function chooseSubject(){\r\n        return (\r\n            <div style={{display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}> \r\n                <div style={{padding: \"1.4vw\"}}>\r\n                    <label style={{paddingLeft: isMobile? \"5%\" : \"\"}} for=\"titles\">Filter Data: </label>\r\n                    <select name=\"titles\" id=\"titles\" onChange={(e) => setSubject(e.target.value)} value={subject}>\r\n                    {allTitles.map(title => {\r\n                        return(\r\n                            <option value={title}>{formatTitle(title)}</option>\r\n                        )}\r\n                    )}\r\n                    </select>\r\n                </div>\r\n                <div style={{textAlign: isMobile? \"center\" : \"\"}}>\r\n                    <h2 style={{fontWeight: \"lighter\"}}>{getDefinition()}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(allData);\r\n    console.log(subject);\r\n    return ( \r\n        <div style={{marginLeft: isMobile? \"5%\" : \"18%\", width: isMobile? \"90%\" : \"60%\"}}>\r\n            {chooseSubject()}\r\n            <Map data={allData} title={subject} setTooltipContent={setContent}/>\r\n            <ReactTooltip>{content}</ReactTooltip>\r\n        </div>\r\n    );\r\n}","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx",["45","46","47"],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx",["48"],"import { useState, useEffect } from 'react';\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport { SliderRail, Handle, Track, Tick } from \"./components\"; // example render components - source below\r\nimport { startOfToday, format } from \"date-fns\";\r\nimport { scaleTime } from \"d3-scale\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst sliderStyle = {\r\n  position: \"relative\",\r\n  width: \"100%\"\r\n};\r\n\r\nfunction formatTick(ms) {\r\n  return format(new Date(ms), \"MMM dd\");\r\n}\r\n\r\nconst timeStep = 1000 * 60 * 1440;\r\n\r\nexport default function Time(props) {\r\n\r\n    const today = startOfToday();\r\n\r\n    const [selected, setSelected] = useState(today);\r\n    const [min, setMin] = useState(new Date(\"12/14/2020\"));\r\n    const [max, setMax] = useState(today);\r\n\r\n\r\n    const isTablet = useMediaQuery({ query: `(max-width: 1400px)` });\r\n    const isMobile = useMediaQuery({ query: `(max-width: 760px)` });\r\n   \r\n\r\n    function onChange([ms]) {\r\n        setSelected(new Date(ms));\r\n        props.selectDate(format(new Date(ms), \"MM/dd/yyyy\"));\r\n    };\r\n\r\n    function renderDateTime(date) {\r\n        return (\r\n        <div\r\n            style={{\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            fontFamily: \"Arial\",\r\n            marginTop: isMobile? \"-15%\" : \"\"\r\n            }}\r\n        >\r\n        {isMobile? \r\n        <div>\r\n             <div style={{ fontSize: 15, paddingBottom: \"1em\" }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\r\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\r\n                <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\r\n                <DatePicker\r\n                    selected={min}\r\n                    onSelect={(date) => setMin(date)} //when day is clicked\r\n                // onChange={handleDateChange} //only when value has changed\r\n                />\r\n                <div style={{paddingTop: \"1em\"}}></div>\r\n                <label style={{padding: \"0.1em\"}}>Set End Date: </label>\r\n                <DatePicker\r\n                    selected={max}\r\n                    onSelect={(date) => setMax(date)} //when day is clicked\r\n                // onChange={handleDateChange} //only when value has changed\r\n                />\r\n                </div>\r\n            </div>\r\n            :\r\n            <div>\r\n                <div style={{paddingBottom: \"1em\", display: \"flex\", flexDirection: isMobile? \"column\" : \"\", justifyContent: \"center\"}}>\r\n                    <label style={{padding: \"0.1em\"}}>Set Start Date: </label>\r\n                    <DatePicker\r\n                        selected={min}\r\n                        onSelect={(date) => setMin(date)} //when day is clicked\r\n                    // onChange={handleDateChange} //only when value has changed\r\n                    />\r\n                    <label style={{padding: \"0.1em\", marginLeft: \"2em\"}}>Set End Date: </label>\r\n                    <DatePicker\r\n                        selected={max}\r\n                        onSelect={(date) => setMax(date)} //when day is clicked\r\n                    // onChange={handleDateChange} //only when value has changed\r\n                    />\r\n                </div>\r\n                <div style={{ fontSize: 15 }}>Date Selected: <b>{format(date, \"MM/dd/yyyy\")}</b></div>\r\n            </div>}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    const days = parseInt((max - min) / (1000 * 60 * 60 * 24), 10);\r\n\r\n    const dateTicks = scaleTime()\r\n      .domain([min, max])\r\n      .ticks(days > 50 || isTablet? 7 : days)\r\n      .map((d) => +d);\r\n\r\n    return (\r\n      <div>\r\n        {isMobile? \"\" : renderDateTime(selected)}\r\n        <div style={{ margin: \"5%\", height: 120, width: \"90%\" }}>\r\n          <Slider\r\n            mode={1}\r\n            step={timeStep}\r\n            domain={[+min, +max]}\r\n            rootStyle={sliderStyle}\r\n            onChange={onChange}\r\n            values={[+selected]}\r\n          >\r\n            <Rail>\r\n              {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n            </Rail>\r\n            <Handles>\r\n              {({ handles, getHandleProps }) => (\r\n                <div>\r\n                  {handles.map((handle) => (\r\n                    <Handle\r\n                      key={handle.id}\r\n                      handle={handle}\r\n                      domain={[+min, +max]}\r\n                      getHandleProps={getHandleProps}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Handles>\r\n            <Tracks right={false}>\r\n              {({ tracks, getTrackProps }) => (\r\n                <div>\r\n                  {tracks.map(({ id, source, target }) => (\r\n                    <Track\r\n                      key={id}\r\n                      source={source}\r\n                      target={target}\r\n                      getTrackProps={getTrackProps}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Tracks>\r\n            <Ticks values={dateTicks}>\r\n              {({ ticks }) => (\r\n                <div>\r\n                  {ticks.map((tick) => (\r\n                    <Tick\r\n                      key={tick.id}\r\n                      tick={tick}\r\n                      count={ticks.length}\r\n                      format={formatTick}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Ticks>\r\n          </Slider>\r\n        </div>\r\n        {isMobile? renderDateTime(selected) : \"\"}\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Home.jsx",["49","50","51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":15},{"ruleId":"61","severity":1,"message":"62","line":35,"column":32,"nodeType":"63","messageId":"64","endLine":35,"endColumn":34},{"ruleId":"61","severity":1,"message":"62","line":41,"column":32,"nodeType":"63","messageId":"64","endLine":41,"endColumn":34},{"ruleId":"57","severity":1,"message":"65","line":49,"column":26,"nodeType":"59","messageId":"60","endLine":49,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":94,"column":8,"nodeType":"68","endLine":94,"endColumn":10,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":93,"column":6,"nodeType":"68","endLine":93,"endColumn":18,"suggestions":"71"},{"ruleId":"66","severity":1,"message":"72","line":102,"column":6,"nodeType":"68","endLine":102,"endColumn":19,"suggestions":"73"},{"ruleId":"66","severity":1,"message":"74","line":107,"column":6,"nodeType":"68","endLine":107,"endColumn":20,"suggestions":"75"},{"ruleId":"57","severity":1,"message":"76","line":1,"column":20,"nodeType":"59","messageId":"60","endLine":1,"endColumn":29},{"ruleId":"77","severity":1,"message":"78","line":23,"column":86,"nodeType":"79","endLine":24,"endColumn":120},{"ruleId":"77","severity":1,"message":"78","line":40,"column":21,"nodeType":"79","endLine":40,"endColumn":85},{"ruleId":"77","severity":1,"message":"78","line":43,"column":21,"nodeType":"79","endLine":43,"endColumn":87},{"ruleId":"77","severity":1,"message":"78","line":46,"column":21,"nodeType":"79","endLine":46,"endColumn":96},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Vaccine' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.","ArrayExpression",["82"],"React Hook useEffect has missing dependencies: 'filterDate', 'makeContinuous', and 'props.title'. Either include them or remove the dependency array.",["83"],"React Hook useEffect has missing dependencies: 'filterDate', 'makeContinuous', 'props.data', and 'selectedTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'selectedTime'.",["84"],"React Hook useEffect has missing dependencies: 'filterDate' and 'timeSeries'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'timeSeries'.",["85"],"'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [transformData]",{"range":"94","text":"95"},"Update the dependencies array to be: [filterDate, makeContinuous, props.data, props.title]",{"range":"96","text":"97"},"Update the dependencies array to be: [filterDate, makeContinuous, props.data, props.title, selectedTime]",{"range":"98","text":"99"},"Update the dependencies array to be: [filterDate, selectedTime, timeSeries]",{"range":"100","text":"101"},[3408,3410],"[transformData]",[2869,2881],"[filterDate, makeContinuous, props.data, props.title]",[3144,3157],"[filterDate, makeContinuous, props.data, props.title, selectedTime]",[3281,3295],"[filterDate, selectedTime, timeSeries]"]