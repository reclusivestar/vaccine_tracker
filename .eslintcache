[{"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js":"1","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js":"2","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js":"3","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx":"4","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx":"5","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js":"6","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":134,"mtime":1610503131128,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":2370,"mtime":1610794548772,"results":"12","hashOfConfig":"9"},{"size":6973,"mtime":1610866870213,"results":"13","hashOfConfig":"9"},{"size":4746,"mtime":1610923666397,"results":"14","hashOfConfig":"9"},{"size":4434,"mtime":1610924229460,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"vi5i8c",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\index.js",[],["33","34"],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\App.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\reportWebVitals.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Vaccine\\Vaccine.jsx",["35","36"],"import React, { useState, useEffect } from 'react';\r\nimport Papa from 'papaparse';\r\nimport axios from 'axios';\r\nimport Map from '../Map/Map';\r\nimport states from '../Map/states.json';\r\n\r\nexport default function Vaccine() {\r\n\r\n    const url = \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/vaccine_data_us_state_timeline.csv\";\r\n\r\n    const [allData, setAllData] = useState([]); //in time series\r\n    \r\n    function transformData(raw){\r\n        let results = [];\r\n        for (const [key, _] of Object.entries(raw.data[0])) {\r\n            let field = {};\r\n            field[\"title\"] = key;\r\n            field[\"data\"] = [];\r\n            results.push(field);\r\n        }\r\n        // filter empty data for each key\r\n\r\n        for (let i = 4; i < results.length; i++){\r\n            raw.data.forEach(field => {\r\n                if (field[results[i].title] !== \"\" && field[results[i].title] !== undefined\r\n                 && field[results[i].title] !== \" \"){\r\n                    results[i].data.push([field[\"date\"], field[\"stabbr\"], field[results[i].title]]);\r\n                }\r\n            })\r\n        }\r\n        let valid_results = results.slice(4);\r\n        console.log(valid_results);\r\n        getDataByState(valid_results);\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchCSV(){\r\n            const csv = await axios.get(url).then(response => \r\n                Papa.parse(response.data,\r\n                          { header: true }));\r\n            transformData(csv);\r\n        }\r\n        fetchCSV();\r\n    }, []);\r\n\r\n    function filterState(raw, state){\r\n        let latest = [];\r\n        raw.forEach(row => {\r\n            let field = {};\r\n            field[\"title\"] = row.title;\r\n            field[\"data\"] = [];\r\n            latest.push(field);\r\n        });\r\n        latest.forEach((field, i) => {\r\n            field.data = raw[i].data.filter(data => data[1] === state);\r\n        });\r\n        return latest;\r\n    };\r\n\r\n    function getDataByState(data){\r\n        let latest_all = [];\r\n        states.forEach(state => {\r\n            latest_all.push({\"id\" : state.id, \"val\" : state.val, data : filterState(data, state.id)});\r\n        });\r\n        setAllData(latest_all);\r\n    }\r\n\r\n    console.log(allData);\r\n    return ( \r\n        <div style={{width: \"80%\"}}>\r\n        <Map data={allData}/>\r\n        </div>\r\n    );\r\n}","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Map.jsx",["37","38"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    Marker,\r\n    Annotation\r\n  } from \"react-simple-maps\";\r\nimport { scaleQuantize, scaleTime } from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport axios from 'axios';\r\nimport Time from './Time';\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst offsets = {\r\n    VT: [50, -8],\r\n    NH: [34, 2],\r\n    MA: [30, -1],\r\n    RI: [28, 2],\r\n    CT: [35, 10],\r\n    NJ: [34, 1],\r\n    DE: [33, 0],\r\n    MD: [47, 10],\r\n    DC: [49, 21]\r\n};\r\n\r\nconst Map = (props) => {\r\n  const url = \"https://datausa.io/api/data?drilldowns=State&measures=Population\";\r\n  const [allStates, setAllStates] = useState([]);\r\n  const [timeSeries, setTimeSeries] = useState([]);\r\n  const [populations, setPopulations] = useState([]);\r\n  const [selectedTime, setSelectedTime] = useState();\r\n\r\n  const colors = [\"#ffedea\", \"#ffcec5\", \"#ffad9f\", \"#ff8a75\", \r\n  \"#ff5533\", \"#e2492d\", \"#be3d26\", \"#9a311f\", \"#782618\"];\r\n\r\n  function extractNumbers() {\r\n    let data = [];\r\n    timeSeries.forEach(state => {\r\n      if (state.data[0]){\r\n        state.data.forEach(date => \r\n          data.push(getRate(state.val, date.count))\r\n        );\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  const colorScale = scaleQuantize()\r\n  .domain(extent(extractNumbers())).nice()\r\n  .range(colors);\r\n  \r\n  function extractDomain(){\r\n    const domains = [];\r\n    colors.forEach(color => \r\n      domains.push({\"color\" : color, \"range\" : colorScale.invertExtent(color)})\r\n    );\r\n    return domains;\r\n  }\r\n\r\n  async function getAllPopulations(){\r\n    const response = await axios.get(url); \r\n    setPopulations(response.data.data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let data = filterField(props.data, \"people_total\");\r\n    setTimeSeries(data);\r\n    //setDateRange(data);\r\n    setAllStates(filterDate(data, \"12/14/2020\"));\r\n    getAllPopulations();\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    setAllStates(filterDate(timeSeries, selectedTime));\r\n  }, [selectedTime]);\r\n\r\n  function getRate(val, count){\r\n    let pop = populations.filter(state => state[\"ID State\"].slice(-2) === val)[0];\r\n    if (pop) //some states not in population data\r\n      return count / pop.Population * 100;\r\n    return 0;\r\n  }\r\n\r\n  function filterField(allData, title){\r\n    let filtered = [];\r\n    allData.forEach(field => {\r\n    let onlyData = field.data.filter(row => row.title === title)[0].data;\r\n    let parsed = [];\r\n        if (onlyData){\r\n            parsed = onlyData.map(val => {\r\n                return {\"date\" : val[0], \"count\" : parseInt(val[2])};\r\n            });\r\n        }\r\n        filtered.push({...field, data: parsed});\r\n    });\r\n    return filtered;\r\n  }\r\n\r\n  function filterDate(data, date) {\r\n    let filtered = [];\r\n    data.forEach(state => {\r\n      let newData = state.data.filter(data => data.date === date);\r\n      filtered.push({...state, data: newData});\r\n    });\r\n    console.log(filtered, date);\r\n    return filtered;\r\n  }\r\n\r\n  const handleClick = val => () => {\r\n    let state = allStates.filter(state => state.val === val);\r\n    console.log(getRate(val, state[0].data[0].count));\r\n    console.log(state);\r\n  };\r\n\r\n  console.log(allStates);\r\n  console.log(extractNumbers());\r\n  console.log(timeSeries);\r\n\r\n  function legend(){\r\n    let domains = extractDomain();\r\n    console.log(domains);\r\n    return (\r\n      <div style={{marginLeft: \"5%\", marginTop: \"10%\"}}>\r\n        {domains.map((domain, i) => {\r\n          let low = Math.round((domain.range[0] + Number.EPSILON) * 100) / 100;\r\n          let high = Math.round((domain.range[1] + Number.EPSILON) * 100) / 100;\r\n          return (\r\n            <div style={{display: \"flex\"}}>\r\n              <div style={{ backgroundColor: colors[i], padding: \"1vw\" }} key={i}></div>\r\n                <p style={{fontSize: \"1vw\", marginLeft: \"1vw\"}}>{low}% - {high}%</p>\r\n              </div>\r\n          )}\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{display: \"flex\",  justifyContent: \"center\"}}>\r\n        <div style={{width: \"80%\"}}>\r\n        <ComposableMap projection=\"geoAlbersUsa\">\r\n          <Geographies geography={geoUrl}>\r\n          {({ geographies }) => (\r\n            <>\r\n              {geographies.map(geo => {\r\n                //const cur = data.find(s => s.id === geo.id);\r\n                const cur = allStates.find(s => s.val === geo.id);\r\n                return (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    fill={cur && cur.data[0] ? colorScale(getRate(cur.val, cur.data[0].count)) : \"#A9A9A9\"}\r\n                    onClick={handleClick(geo.id)}\r\n                    /*onMouseEnter={() => console.log(geo.id)}*/\r\n                  />\r\n                );\r\n              })}\r\n              {geographies.map(geo => {\r\n                const centroid = geoCentroid(geo);\r\n                const cur = allStates.find(s => s.val === geo.id);\r\n                return (\r\n                  <g key={geo.rsmKey + \"-name\"}>\r\n                    {cur &&\r\n                      centroid[0] > -160 &&\r\n                      centroid[0] < -67 &&\r\n                      (Object.keys(offsets).indexOf(cur.id) === -1 ? (\r\n                        <Marker coordinates={centroid}>\r\n                          <text y=\"2\" fontSize={14} textAnchor=\"middle\">\r\n                            {cur.id}\r\n                          </text>\r\n                        </Marker>\r\n                      ) : (\r\n                        <Annotation\r\n                          subject={centroid}\r\n                          dx={offsets[cur.id][0]}\r\n                          dy={offsets[cur.id][1]}\r\n                        >\r\n                          <text x={4} fontSize={14} alignmentBaseline=\"middle\">\r\n                            {cur.id}\r\n                          </text>\r\n                        </Annotation>\r\n                      ))}\r\n                  </g>\r\n                );\r\n              })}\r\n            </>\r\n          )}\r\n        </Geographies>\r\n        </ComposableMap>\r\n        </div>\r\n        {legend()}\r\n      </div>\r\n    <Time selectDate={setSelectedTime}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\n\r\n  /*function filterLatest(){\r\n    let latest = [];\r\n    props.data.forEach(field => {\r\n        let newData = [];\r\n        field.data.forEach(row => {\r\n            newData.push({...row, data: row.data.slice(row.data.length - 1)});\r\n        });\r\n        latest.push({...field, data: newData});\r\n    });\r\n    return latest;\r\n  }*/\r\n\r\n  /*function setDateRange(states) {\r\n    let dates = [];\r\n    states.forEach(state => {\r\n      state.data.forEach(data => dates.push(new Date(data.date)));\r\n    });\r\n    let maxDate = new Date(Math.max.apply(null,dates));\r\n    let minDate = new Date(Math.min.apply(null,dates));\r\n    setStartDate(minDate);\r\n    setEndDate(maxDate);\r\n  }*/\r\n","C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\components.js",[],"C:\\Users\\tanma\\Desktop\\covid\\vaccine\\src\\Map\\Time.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":15,"column":26,"nodeType":"45","messageId":"46","endLine":15,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":44,"column":8,"nodeType":"49","endLine":44,"endColumn":10,"suggestions":"50"},{"ruleId":"43","severity":1,"message":"51","line":9,"column":25,"nodeType":"45","messageId":"46","endLine":9,"endColumn":34},{"ruleId":"47","severity":1,"message":"52","line":78,"column":6,"nodeType":"49","endLine":78,"endColumn":20,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.","ArrayExpression",["56"],"'scaleTime' is defined but never used.","React Hook useEffect has a missing dependency: 'timeSeries'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAllStates' needs the current value of 'timeSeries'.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [transformData]",{"range":"62","text":"63"},"Update the dependencies array to be: [selectedTime, timeSeries]",{"range":"64","text":"65"},[1562,1564],"[transformData]",[2085,2099],"[selectedTime, timeSeries]"]